name: CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract repo
        id: meta
        run: |
          IMAGE=ghcr.io/${{ github.repository }}
          echo "image=${IMAGE,,}" >> $GITHUB_OUTPUT  # 소문자화

      - name: Build and Push (GHCR)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.image }}:latest,${{ steps.meta.outputs.image }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
  deploy:
    runs-on: ubuntu-24.04
    needs: build-and-push
    steps:
      - name: Deploy to Oracle VM (pull latest image and run)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: 152.67.214.221
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            IMAGE="ghcr.io/${{ github.repository }}"
            IMAGE_LC=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')

            # Ensure Docker is present (idempotent)
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl enable --now docker
            fi

            # Login to GHCR (required for private images); uses password-stdin to avoid warning
            echo "${{ secrets.GHCR_PAT }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Pull the newest image
            sudo docker pull "${IMAGE_LC}:latest"

            # Stop and remove existing container if present
            sudo docker stop parrokit || true
            sudo docker rm parrokit || true

            # Run container (exposes FastAPI at port 8000)
            sudo docker run -d --name parrokit -p 8000:8000 "${IMAGE_LC}:latest"